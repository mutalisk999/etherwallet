'use strict';
var deployContractCtrl = function($scope, $sce, walletService) {
    $scope.ajaxReq = ajaxReq;
    walletService.wallet = null;
    $scope.visibility = "deployView";
    $scope.sendContractModal = new Modal(document.getElementById('sendContract'));
    $scope.showReadWrite = false;
    $scope.sendTxModal = new Modal(document.getElementById('deployContract'));
    $scope.Validator = Validator;
    $scope.contractNameShow=true;
    $scope.local = new local();
    $scope.alertModal = new Modal(document.getElementById('alertMsg'));
    $scope.tx = {
        gasLimit: '',
        data: '6060604052341561000f57600080fd5b604051611607380380611607833981016040528080518201919060200180519060200190919050505b81815b6000825182118061004d575060fa8351115b1561005757610114565b8251600181905550600090505b825181101561010c57828181518110151561007b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600260018301610100811015156100ae57fe5b0160005b508190555060018101610102600085848151811015156100ce57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b806001019050610064565b816000819055505b5050505b50505b6114dd8061012a6000396000f300606060405236156100c3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307a090cd1461013c578063083c5eba146101a75780631398a5f6146101e65780634123cb6b1461020f578063627a741914610238578063746c9171146102b5578063797af627146102de578063a0e67e2b1461031d578063b61d27f614610388578063b75c7dc6146103f6578063c2cf73261461041d578063c41a360a1461047b578063ef18374a146104de575b5b6000341115610139577fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b005b341561014757600080fd5b61014f610507565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101935780820151818401525b602081019050610177565b505050509050019250505060405180910390f35b34156101b257600080fd5b6101cc60048080356000191690602001909190505061063e565b604051808215151515815260200191505060405180910390f35b34156101f157600080fd5b6101f9610680565b6040518082815260200191505060405180910390f35b341561021a57600080fd5b61022261068a565b6040518082815260200191505060405180910390f35b341561024357600080fd5b61025d600480803560001916906020019091905050610690565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102a15780820151818401525b602081019050610285565b505050509050019250505060405180910390f35b34156102c057600080fd5b6102c86107d4565b6040518082815260200191505060405180910390f35b34156102e957600080fd5b6103036004808035600019169060200190919050506107da565b604051808215151515815260200191505060405180910390f35b341561032857600080fd5b6103306107ef565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103745780820151818401525b602081019050610358565b505050509050019250505060405180910390f35b341561039357600080fd5b6103dc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001919091929050506108ac565b604051808215151515815260200191505060405180910390f35b341561040157600080fd5b61041b600480803560001916906020019091905050610b3c565b005b341561042857600080fd5b61046160048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c50565b604051808215151515815260200191505060405180910390f35b341561048657600080fd5b61049c6004808035906020019091905050610cd0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e957600080fd5b6104f1610cf3565b6040518082815260200191505060405180910390f35b61050f61134b565b600080600061051c61134b565b6101048054905093506000925060009150600091505b8382101561057a5760006101048381548110151561054c57fe5b906000526020600020900160005b50546001900414151561056e576001830192505b5b816001019150610532565b826040518059106105885750595b908082528060200260200182016040525b50905060009250600091505b83821015610633576000610104838154811015156105bf57fe5b906000526020600020900160005b50546001900414151561062757610104828154811015156105ea57fe5b906000526020600020900160005b5054818481518110151561060857fe5b9060200190602002019060001916908160001916815250506001830192505b5b8160010191506105a5565b8094505b5050505090565b600080610103600084600019166000191681526020019081526020016000209050600081600001541415610675576001915061067a565b600091505b50919050565b6000805490505b90565b60015481565b61069861135f565b6000806000806106a661135f565b610103600088600019166000191681526020019081526020016000209450600093506000925060009150600193505b60fa84111515610708578360020a92506000838660010154161415156106fc576001820191505b5b8360010193506106d5565b816040518059106107165750595b908082528060200260200182016040525b50905060009150600193505b60fa841115156107c6578360020a92506000838660010154161415156107ba576002846101008110151561076357fe5b0160005b5054818381518110151561077757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001820191505b5b836001019350610733565b8095505b5050505050919050565b60005481565b60006107e7826000610cfe565b90505b919050565b6107f761135f565b6107ff61135f565b60006001546040518059106108115750595b908082528060200260200182016040525b509150600090505b6001548110156108a3576002600182016101008110151561084757fe5b0160005b5054828281518110151561085b57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b80600101905061082a565b8192505b505090565b6000806108b8336110e7565b15156108c357600080fd5b858560003643604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018581526020018484808284378201915050828152602001955050505050506040518091039020905060006101056000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a4a57856101056000836000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508461010560008360001916600019168152602001908152602001600020600101819055508383610105600084600019166000191681526020019081526020016000206002019190610a44929190611373565b50610a53565b60009150610b32565b7f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328133878988886040518087600019166000191681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a1610b2f816001610cfe565b91505b5b50949350505050565b600080600061010260003373ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492506000831415610b7c57610c4a565b8260020a91506101036000856000191660001916815260200190815260200160002090506000828260010154161115610c495780600001600081548092919060010191905055508181600101600082825403925050819055507fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a15b5b50505050565b60008060008061010360008760001916600019168152602001908152602001600020925061010260008673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000821415610cb35760009350610cc7565b8160020a9050600081846001015416141593505b50505092915050565b600060026001830161010081101515610ce557fe5b0160005b505490505b919050565b600060015490505b90565b60008282610d0c828261111e565b1515610d1757600080fd5b60006101056000876000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610d9d57506000610103600087600019166000191681526020019081526020016000206000015411155b156110dd576101056000866000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166101056000876000191660001916815260200190815260200160002060010154610105600088600019166000191681526020019081526020016000206002016040518082805460018160011615610100020316600290048015610e9c5780601f10610e7157610100808354040283529160200191610e9c565b820191906000526020600020905b815481529060010190602001808311610e7f57829003601f168201915b505091505060006040518083038185876187965a03f1925050501515610ec157600080fd5b7fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a3386610105600089600019166000191681526020019081526020016000206001015461010560008a6000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661010560008b60001916600019168152602001908152602001600020600201604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185600019166000191681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110645780601f1061103957610100808354040283529160200191611064565b820191906000526020600020905b81548152906001019060200180831161104757829003601f168201915b5050965050505050505060405180910390a161010560008660001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006110d291906113f3565b5050600192506110de565b5b5b505092915050565b60008061010260008473ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541190505b919050565b60008060008061010260003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060008314156111635760009350611342565b6101036000876000191660001916815260200190815260200160002091506000826000015414156111fd5784151561119e5760009350611342565b60005482600001819055506000826001018190555061010480548091906001016111c8919061143b565b82600201819055508561010483600201548154811015156111e557fe5b906000526020600020900160005b5081600019169055505b8260020a9050600081836001015416141561133d577fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda3387604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a1816000016000815480929190600190039190505550808260010160008282541792505081905550600082600001541115156113345761010461010360008860001916600019168152602001908152602001600020600201548154811015156112e957fe5b906000526020600020900160005b5060009055610103600087600019166000191681526020019081526020016000206000808201600090556001820160009055600282016000905550505b60019350611342565b600093505b50505092915050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113b457803560ff19168380011785556113e2565b828001600101855582156113e2579182015b828111156113e15782358255916020019190600101906113c6565b5b5090506113ef9190611467565b5090565b50805460018160011615610100020316600290046000825580601f106114195750611438565b601f0160209004906000526020600020908101906114379190611467565b5b50565b81548183558181151161146257818360005260206000209182019101611461919061148c565b5b505050565b61148991905b8082111561148557600081600090555060010161146d565b5090565b90565b6114ae91905b808211156114aa576000816000905550600101611492565b5090565b905600a165627a7a72305820adf06a69ebf0036f93933c98b8f0431a309fbd607c95241dc32aa39f26e199fd0029',
        to: '',
        unit: "ether",
        value: 0,
        nonce: null,
        gasPrice: null
    }
    $scope.contract = {
        address: globalFuncs.urlGet('address') != null && $scope.Validator.isValidAddress(globalFuncs.urlGet('address')) ? globalFuncs.urlGet('address') : '',
        abi: '',
        functions: [],
        selectedFunc: null
    }
    $scope.selectedAbi = ajaxReq.abiList[0];
    $scope.showRaw = false;
    $scope.contains=function(arr, obj) {
        var i = arr.length;
        while (i--) {
            if (arr[i] === obj) {
                return true;
            }
        }
        return false;
    }
    $scope.$watch(function() {
        if (walletService.wallet == null) return null;
        return walletService.wallet.getAddressString();
    }, function() {
        if (walletService.wallet == null) return;
        $scope.wallet = walletService.wallet;
        $scope.wd = true;
        $scope.tx.nonce = 0;

    });
    /*$scope.$watch('visibility', function(newValue, oldValue) {
        $scope.tx = {
            gasLimit: '',
            data: '',
            to: '',
            unit: "ether",
            value: 0,
            nonce: null,
            gasPrice: null
        }

    });*/
    $scope.$watch('tx', function(newValue, oldValue) {
        $scope.showRaw = false;
        if (newValue.gasLimit == oldValue.gasLimit && $scope.Validator.isValidHex($scope.tx.data) && $scope.tx.data != '' && $scope.Validator.isPositiveNumber($scope.tx.value)) {
            if ($scope.estimateTimer) clearTimeout($scope.estimateTimer);
            $scope.estimateTimer = setTimeout(function() {
                $scope.estimateGasLimit();
            }, 50);
        }
    }, true);
    $scope.$watch('contract.address', function(newValue, oldValue) {
        if ($scope.Validator.isValidAddress($scope.contract.address)) {
            for (var i in ajaxReq.abiList) {
                if (ajaxReq.abiList[i].address.toLowerCase() == $scope.contract.address.toLowerCase()) {
                    $scope.contract.abi = ajaxReq.abiList[i].abi;
                    break;
                }
            }
        }
    });
    $scope.selectExistingAbi = function(index) {
        $scope.selectedAbi = ajaxReq.abiList[index];
        $scope.contract.address = $scope.selectedAbi.address;
        $scope.addressDrtv.ensAddressField = $scope.selectedAbi.address;
        $scope.addressDrtv.showDerivedAddress = false;
        $scope.dropdownExistingContracts = false;
        $scope.contract.selectedFunc=null
        $scope.dropdownContracts = false;

        if ($scope.initContractTimer) clearTimeout($scope.initContractTimer);
        $scope.initContractTimer = setTimeout(function() {
            $scope.initContract();
        }, 50);
    }
    $scope.estimateGasLimit = function() {
        var estObj = {
            from: $scope.wallet != null ? $scope.wallet.getAddressString() : globalFuncs.donateAddress,
            value: ethFuncs.sanitizeHex(ethFuncs.decimalToHex(etherUnits.toWei($scope.tx.value, $scope.tx.unit))),
            data: ethFuncs.sanitizeHex($scope.tx.data),
        }
        if(globalFuncs.isNumeric($scope.tx.required) && $scope.Validator.isValidAddressArray($scope.tx.owners)){
            var ownerArray = $scope.tx.owners.split(',');
            estObj.data = estObj.data+'0000000000000000000000000000000000000000000000000000000000000040';
            estObj.data =estObj.data+ethFuncs.sanitizeHex64(ethFuncs.sanitizeHex(ethFuncs.decimalToHex($scope.tx.required)));
            estObj.data =estObj.data+ethFuncs.sanitizeHex64(ethFuncs.sanitizeHex(ethFuncs.decimalToHex(ownerArray.length)));
            for(var i=0;i<ownerArray.length;i++){
                estObj.data =estObj.data+ethFuncs.sanitizeLength(ownerArray[i]);
            }
        }
        if ($scope.tx.to != '') estObj.to = $scope.tx.to;
        ethFuncs.estimateGas(estObj, function(data) {
            if (!data.error) $scope.tx.gasLimit = data.data;
        });
    }
    $scope.generateTx = function() {
        try {
            $scope.tx.data='6060604052341561000f57600080fd5b604051611607380380611607833981016040528080518201919060200180519060200190919050505b81815b6000825182118061004d575060fa8351115b1561005757610114565b8251600181905550600090505b825181101561010c57828181518110151561007b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600260018301610100811015156100ae57fe5b0160005b508190555060018101610102600085848151811015156100ce57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b806001019050610064565b816000819055505b5050505b50505b6114dd8061012a6000396000f300606060405236156100c3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307a090cd1461013c578063083c5eba146101a75780631398a5f6146101e65780634123cb6b1461020f578063627a741914610238578063746c9171146102b5578063797af627146102de578063a0e67e2b1461031d578063b61d27f614610388578063b75c7dc6146103f6578063c2cf73261461041d578063c41a360a1461047b578063ef18374a146104de575b5b6000341115610139577fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b5b005b341561014757600080fd5b61014f610507565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101935780820151818401525b602081019050610177565b505050509050019250505060405180910390f35b34156101b257600080fd5b6101cc60048080356000191690602001909190505061063e565b604051808215151515815260200191505060405180910390f35b34156101f157600080fd5b6101f9610680565b6040518082815260200191505060405180910390f35b341561021a57600080fd5b61022261068a565b6040518082815260200191505060405180910390f35b341561024357600080fd5b61025d600480803560001916906020019091905050610690565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102a15780820151818401525b602081019050610285565b505050509050019250505060405180910390f35b34156102c057600080fd5b6102c86107d4565b6040518082815260200191505060405180910390f35b34156102e957600080fd5b6103036004808035600019169060200190919050506107da565b604051808215151515815260200191505060405180910390f35b341561032857600080fd5b6103306107ef565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103745780820151818401525b602081019050610358565b505050509050019250505060405180910390f35b341561039357600080fd5b6103dc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001919091929050506108ac565b604051808215151515815260200191505060405180910390f35b341561040157600080fd5b61041b600480803560001916906020019091905050610b3c565b005b341561042857600080fd5b61046160048080356000191690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c50565b604051808215151515815260200191505060405180910390f35b341561048657600080fd5b61049c6004808035906020019091905050610cd0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e957600080fd5b6104f1610cf3565b6040518082815260200191505060405180910390f35b61050f61134b565b600080600061051c61134b565b6101048054905093506000925060009150600091505b8382101561057a5760006101048381548110151561054c57fe5b906000526020600020900160005b50546001900414151561056e576001830192505b5b816001019150610532565b826040518059106105885750595b908082528060200260200182016040525b50905060009250600091505b83821015610633576000610104838154811015156105bf57fe5b906000526020600020900160005b50546001900414151561062757610104828154811015156105ea57fe5b906000526020600020900160005b5054818481518110151561060857fe5b9060200190602002019060001916908160001916815250506001830192505b5b8160010191506105a5565b8094505b5050505090565b600080610103600084600019166000191681526020019081526020016000209050600081600001541415610675576001915061067a565b600091505b50919050565b6000805490505b90565b60015481565b61069861135f565b6000806000806106a661135f565b610103600088600019166000191681526020019081526020016000209450600093506000925060009150600193505b60fa84111515610708578360020a92506000838660010154161415156106fc576001820191505b5b8360010193506106d5565b816040518059106107165750595b908082528060200260200182016040525b50905060009150600193505b60fa841115156107c6578360020a92506000838660010154161415156107ba576002846101008110151561076357fe5b0160005b5054818381518110151561077757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001820191505b5b836001019350610733565b8095505b5050505050919050565b60005481565b60006107e7826000610cfe565b90505b919050565b6107f761135f565b6107ff61135f565b60006001546040518059106108115750595b908082528060200260200182016040525b509150600090505b6001548110156108a3576002600182016101008110151561084757fe5b0160005b5054828281518110151561085b57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b80600101905061082a565b8192505b505090565b6000806108b8336110e7565b15156108c357600080fd5b858560003643604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018581526020018484808284378201915050828152602001955050505050506040518091039020905060006101056000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a4a57856101056000836000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508461010560008360001916600019168152602001908152602001600020600101819055508383610105600084600019166000191681526020019081526020016000206002019190610a44929190611373565b50610a53565b60009150610b32565b7f1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf328133878988886040518087600019166000191681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437820191505097505050505050505060405180910390a1610b2f816001610cfe565b91505b5b50949350505050565b600080600061010260003373ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492506000831415610b7c57610c4a565b8260020a91506101036000856000191660001916815260200190815260200160002090506000828260010154161115610c495780600001600081548092919060010191905055508181600101600082825403925050819055507fc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b3385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a15b5b50505050565b60008060008061010360008760001916600019168152602001908152602001600020925061010260008673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506000821415610cb35760009350610cc7565b8160020a9050600081846001015416141593505b50505092915050565b600060026001830161010081101515610ce557fe5b0160005b505490505b919050565b600060015490505b90565b60008282610d0c828261111e565b1515610d1757600080fd5b60006101056000876000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015610d9d57506000610103600087600019166000191681526020019081526020016000206000015411155b156110dd576101056000866000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166101056000876000191660001916815260200190815260200160002060010154610105600088600019166000191681526020019081526020016000206002016040518082805460018160011615610100020316600290048015610e9c5780601f10610e7157610100808354040283529160200191610e9c565b820191906000526020600020905b815481529060010190602001808311610e7f57829003601f168201915b505091505060006040518083038185876187965a03f1925050501515610ec157600080fd5b7fe7c957c06e9a662c1a6c77366179f5b702b97651dc28eee7d5bf1dff6e40bb4a3386610105600089600019166000191681526020019081526020016000206001015461010560008a6000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661010560008b60001916600019168152602001908152602001600020600201604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185600019166000191681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110645780601f1061103957610100808354040283529160200191611064565b820191906000526020600020905b81548152906001019060200180831161104757829003601f168201915b5050965050505050505060405180910390a161010560008660001916600019168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006110d291906113f3565b5050600192506110de565b5b5b505092915050565b60008061010260008473ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541190505b919050565b60008060008061010260003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060008314156111635760009350611342565b6101036000876000191660001916815260200190815260200160002091506000826000015414156111fd5784151561119e5760009350611342565b60005482600001819055506000826001018190555061010480548091906001016111c8919061143b565b82600201819055508561010483600201548154811015156111e557fe5b906000526020600020900160005b5081600019169055505b8260020a9050600081836001015416141561133d577fe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda3387604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a1816000016000815480929190600190039190505550808260010160008282541792505081905550600082600001541115156113345761010461010360008860001916600019168152602001908152602001600020600201548154811015156112e957fe5b906000526020600020900160005b5060009055610103600087600019166000191681526020019081526020016000206000808201600090556001820160009055600282016000905550505b60019350611342565b600093505b50505092915050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113b457803560ff19168380011785556113e2565b828001600101855582156113e2579182015b828111156113e15782358255916020019190600101906113c6565b5b5090506113ef9190611467565b5090565b50805460018160011615610100020316600290046000825580601f106114195750611438565b601f0160209004906000526020600020908101906114379190611467565b5b50565b81548183558181151161146257818360005260206000209182019101611461919061148c565b5b505050565b61148991905b8082111561148557600081600090555060010161146d565b5090565b90565b6114ae91905b808211156114aa576000816000905550600101611492565b5090565b905600a165627a7a72305820adf06a69ebf0036f93933c98b8f0431a309fbd607c95241dc32aa39f26e199fd0029';
            if ($scope.wallet == null) throw globalFuncs.errorMsgs[3];
            else if (!ethFuncs.validateHexString($scope.tx.data)) throw globalFuncs.errorMsgs[9];
            else if (!globalFuncs.isNumeric($scope.tx.gasLimit) || parseFloat($scope.tx.gasLimit) <= 0) throw globalFuncs.errorMsgs[8];
            else if (!globalFuncs.isNumeric($scope.tx.required) || parseInt($scope.tx.required) <= 0) throw globalFuncs.errorMsgs[38];
            else if(!$scope.Validator.isValidAddressArray($scope.tx.owners)){
                throw globalFuncs.errorMsgs[39];
            }
            else if(!$scope.Validator.isNotEmpty($scope.contractName)){
                $scope.notifier.danger('请输入合约名称');
                return;
            }
            //校验合约地址是否重复
            //校验所有者个数
            var ownerArray = $scope.tx.owners.split(',');
            var ownerTemp = [];
            for(var i=0;i<ownerArray.length;i++){
                if($scope.contains(ownerTemp,ownerArray[i])){
                    $scope.notifier.danger('所有者中第'+(i+1)+"个地址重复");
                    return;
                }
                ownerTemp.push(ownerArray[i]);
            }
            if(parseInt($scope.tx.required)>ownerArray.length){
                $scope.notifier.danger('所有者个数不能大于'+ownerArray.length);
                return;
            }
            $scope.tx.data = ethFuncs.sanitizeHex($scope.tx.data);
            //data追加参数
            $scope.tx.data = $scope.tx.data+'0000000000000000000000000000000000000000000000000000000000000040';
            $scope.tx.data =$scope.tx.data+ethFuncs.sanitizeHex64(ethFuncs.sanitizeHex(ethFuncs.decimalToHex($scope.tx.required)));
            $scope.tx.data =$scope.tx.data+ethFuncs.sanitizeHex64(ethFuncs.sanitizeHex(ethFuncs.decimalToHex(ownerArray.length)));
            for(var i=0;i<ownerArray.length;i++){
                $scope.tx.data =$scope.tx.data+ethFuncs.sanitizeLength(ownerArray[i]);
            }
            ajaxReq.getTransactionData($scope.wallet.getAddressString(), function(data) {
                if (data.error) $scope.notifier.danger(data.msg);
                data = data.data;
                $scope.tx.to = $scope.tx.to == '' ? '0xCONTRACT' : $scope.tx.to;
                $scope.tx.contractAddr = $scope.tx.to == '0xCONTRACT' ? ethFuncs.getDeteministicContractAddress($scope.wallet.getAddressString(), data.nonce) : '';
                var txData = uiFuncs.getTxData($scope);
                uiFuncs.generateTx(txData, function(rawTx) {
                    if (!rawTx.isError) {
                        $scope.rawTx = rawTx.rawTx;
                        $scope.signedTx = rawTx.signedTx;

                        $scope.showRaw = true;
                    } else {
                        $scope.showRaw = false;
                        $scope.notifier.danger(rawTx.error);
                    }
                    if (!$scope.$$phase) $scope.$apply();
                });
            });
        } catch (e) {
            $scope.notifier.danger(e);
        }
    }
    $scope.sendTx = function() {
        $scope.sendTxModal.close();
        $scope.sendContractModal.close();
        uiFuncs.sendTx($scope.signedTx, function(resp) {
            //console.log("创建合约返回："+JSON.stringify(resp));
            if (!resp.isError) {
                var bExStr = $scope.ajaxReq.type != nodes.nodeTypes.Custom ? "<a href='" + $scope.ajaxReq.blockExplorerTX.replace("[[txHash]]", resp.data) + "' target='_blank' rel='noopener'> View your transaction </a>" : '';
                var contractAddr = $scope.tx.contractAddr != '' ? " & Contract Address <a href='" + ajaxReq.blockExplorerAddr.replace('[[address]]', $scope.tx.contractAddr) + "' target='_blank' rel='noopener'>" + $scope.tx.contractAddr + "</a>" : '';
                $scope.notifier.success(globalFuncs.successMsgs[2] + "<br />" + resp.data + "<br />" + bExStr + contractAddr);

                //弹框显示合约地址
                $scope.alertTitle="合约地址";
                $scope.alertContent=$scope.tx.contractAddr;
                $scope.alertModal.open();
                $scope.showRaw = false;
                //后台保存
                $scope.local.addContract(
                    {contractAddress:$scope.tx.contractAddr,
                        contractName:$scope.contractName,
                        fromChain:$scope.ajaxReq.type
                    },
                    function(data) {
                    if (data.error){
                        $scope.notifier.danger(data.msg);
                    }
                });
            } else {
                $scope.notifier.danger(resp.error);
            }
        });
    }
    $scope.setVisibility = function(str) {
        $scope.visibility = str;
    }
    $scope.selectFunc = function(index) {
        $scope.contract.selectedFunc = { name: $scope.contract.functions[index].name, index: index };
        if (!$scope.contract.functions[index].inputs.length) {
            $scope.readFromContract();
            $scope.showRead = false;
        } else $scope.showRead = true;
        $scope.dropdownContracts = !$scope.dropdownContracts;
    }
    $scope.getTxData = function() {
        var curFunc = $scope.contract.functions[$scope.contract.selectedFunc.index];
        var fullFuncName = ethUtil.solidityUtils.transformToFullName(curFunc);
        var funcSig = ethFuncs.getFunctionSignature(fullFuncName);
        var typeName = ethUtil.solidityUtils.extractTypeName(fullFuncName);
        var types = typeName.split(',');
        types = types[0] == "" ? [] : types;
        var values = [];
        for (var i in curFunc.inputs) {
            if (curFunc.inputs[i].value) {
                if (curFunc.inputs[i].type.indexOf('[') !== -1 && curFunc.inputs[i].type.indexOf(']') !== -1) values.push(curFunc.inputs[i].value.split(','));
                else values.push(curFunc.inputs[i].value);
            } else values.push('');
        }
        return '0x' + funcSig + ethUtil.solidityCoder.encodeParams(types, values);
    }
    $scope.readFromContract = function() {
        ajaxReq.getEthCall({ to: $scope.contract.address, data: $scope.getTxData() }, function(data) {
            if (!data.error) {
                var curFunc = $scope.contract.functions[$scope.contract.selectedFunc.index];
                var outTypes = curFunc.outputs.map(function(i) {
                    return i.type;
                });
                var decoded = ethUtil.solidityCoder.decodeParams(outTypes, data.data.replace('0x', ''));
                for (var i in decoded) {
                    if (decoded[i] instanceof BigNumber) curFunc.outputs[i].value = decoded[i].toFixed(0);
                    else curFunc.outputs[i].value = decoded[i];
                }
            } else throw data.msg;

        });
    }
    $scope.initContract = function() {
        try {
            if (!$scope.Validator.isValidAddress($scope.contract.address)) throw globalFuncs.errorMsgs[5];
            else if (!$scope.Validator.isJSON($scope.contract.abi)) throw globalFuncs.errorMsgs[26];
            $scope.contract.functions = [];
            var tAbi = JSON.parse($scope.contract.abi);
            for (var i in tAbi)
                if (tAbi[i].type == "function") {
                    tAbi[i].inputs.map(function(i) { i.value = ''; });
                    $scope.contract.functions.push(tAbi[i]);
                }
            $scope.showReadWrite = true;

        } catch (e) {
            $scope.notifier.danger(e);
        }
    }
    $scope.generateContractTx = function() {
        if (!$scope.wd) {
            $scope.notifier.danger(globalFuncs.errorMsgs[3]);
            return;
        }
        $scope.tx.data = $scope.getTxData();
        $scope.tx.to = $scope.contract.address;
        $scope.sendContractModal.open();
    }
}
module.exports = deployContractCtrl;